ev@fedora:~/3Dgen/npair$ git checkout e602f0328ceb57454f5ec9cd6e0d4610ff4e7242
Note: switching to 'e602f0328ceb57454f5ec9cd6e0d4610ff4e7242'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e602f03 generic category route
ev@fedora:~/3Dgen/npair$ git checkout 56c1827e9a5d9d19018a9516d90983013a2bf97a -- data/api/data_api.py
ev@fedora:~/3Dgen/npair$ git checkout 56c1827e9a5d9d19018a9516d90983013a2bf97a -- native/user_api.py
ev@fedora:~/3Dgen/npair$ git checkout 56c1827e9a5d9d19018a9516d90983013a2bf97a -- native/templates/generate_object.html            
ev@fedora:~/3Dgen/npair$ git checkout 56c1827e9a5d9d19018a9516d90983013a2bf97a -- native/templates/images.html
ev@fedora:~/3Dgen/npair$ git diff e602f0328ceb57454f5ec9cd6e0d4610ff4e7242 56c1827e9a5d9d19018a9516d90983013a2bf97a -- model/api/model_api.py
diff --git a/model/api/model_api.py b/model/api/model_api.py
index 3b85355..d9a5515 100755
--- a/model/api/model_api.py
+++ b/model/api/model_api.py
@@ -16,37 +16,27 @@ logger = logging.getLogger(__name__)
 
 app = FastAPI()
 
-class GenerateRequest(SQLModel):
-    image_name: str
-
-class GenerateResponse(SQLModel):
-    object_3d: str
-    object_2d: str
-
 OBJECTS_DIR = "/data/storage/objects"
 RENDERS_DIR = "/data/storage/renders"
 
-@app.post("/generate", response_model=GenerateResponse)
-async def generate_3d_model(request: GenerateRequest):
-    image_path = request.image_path
-    logger.debug(f"Image path received by the model: {image_path}")
-    
+@app.post("/generate")
+async def generate_3d_model(model_parameters: dict):
+    image_path = model_parameters['image_path']
 
-@app.post("/generate", response_model=GenerateResponse)
-async def generate_3d_model(request: GenerateRequest):
-    image_path = request.image_path
-    logger.debug(f"Image path received by the model: {image_path}")
-    
+@app.post("/generate")
+async def generate_3d_model(model_parameters: dict):
+    image_path = model_parameters['image_path']
+    logger.debug(f"Image path received by the model: {image_path}")   
     if not os.path.exists(image_path):
         raise HTTPException(status_code=404, detail="Image not found")
-
     # Generate unique names for the output files
     base_name = os.path.basename(image_path)
     base_name = os.path.splitext(base_name)[0]
     object_3d_name = f"{base_name}_3d.glb"
     object_2d_name = f"{base_name}_2d.png"
-
     object_3d_path = os.path.join(OBJECTS_DIR, object_3d_name)
     object_2d_path = os.path.join(RENDERS_DIR, object_2d_name)
-
+    logger.debug(f"Paths generated by the model: {object_3d_path}")
     # Run the model using subprocess
     try:
         result = subprocess.run([
-            "python", "/app/triposr/run.py",
+            "python3", "/app/triposr/run.py",
             image_path,
             "--model-save-format", "glb",
             "--render",
@@ -54,16 +44,12 @@ async def generate_3d_model(request: GenerateRequest):
         ], check=True, capture_output=True, text=True)
     except subprocess.CalledProcessError as e:
         raise HTTPException(status_code=500, detail=f"Model generation failed: {e.stderr}")
-
+    logger.debug(f"Subprocess run succesful")
     # Check if the files were created
     if not os.path.exists(object_3d_path) or not os.path.exists(object_2d_path):
         raise HTTPException(status_code=500, detail="Model generation did not produce expected output files")
-
     # Move the render to the renders directory
     render_path = os.path.join(RENDERS_DIR, object_2d_name)
     shutil.move(object_2d_path, render_path)
-
-    return GenerateResponse(
-        object_3d=object_3d_name,
-        object_2d=object_2d_name
-    )
+    model_data={object_3d_path, object_2d_path}
+    return model_data
(END)
