from fastapi import FastAPI, HTTPException
from sqlmodel import SQLModel, Field
import os
import shutil
import subprocess
import logging

# Create logs directory if it doesn't exist
os.makedirs("/app/logs", exist_ok=True)

# Setup logging
logging.basicConfig(level=logging.DEBUG, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    filename='/app/logs/model_api.log')
logger = logging.getLogger(__name__)

app = FastAPI()

OBJECTS_DIR = "/data/storage/objects"
RENDERS_DIR = "/data/storage/renders"

@app.post("/generate")
async def generate_3d_model(model_parameters: dict):
    image_path = model_parameters['image_path']
    logger.debug(f"Image path received by the model: {image_path}")   
    if not os.path.exists(image_path):
        raise HTTPException(status_code=404, detail="Image not found")
    # Generate unique names for the output files
    base_name = os.path.basename(image_path)
    base_name = os.path.splitext(base_name)[0]
    object_3d_name = f"{base_name}_3d.glb"
    object_2d_name = f"{base_name}_2d.png"
    object_3d_path = os.path.join(OBJECTS_DIR, object_3d_name)
    object_2d_path = os.path.join(RENDERS_DIR, object_2d_name)
    logger.debug(f"Paths generated by the model: {object_3d_path}")
    # Run the model using subprocess
    try:
        result = subprocess.run([
            "python3", "/app/triposr/run.py",
            image_path,
            "--model-save-format", "glb",
            "--render",
            "--output-dir", OBJECTS_DIR
        ], check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        raise HTTPException(status_code=500, detail=f"Model generation failed: {e.stderr}")
    logger.debug(f"Subprocess run succesful")
    # Check if the files were created
    if not os.path.exists(object_3d_path) or not os.path.exists(object_2d_path):
        raise HTTPException(status_code=500, detail="Model generation did not produce expected output files")
    # Move the render to the renders directory
    render_path = os.path.join(RENDERS_DIR, object_2d_name)
    shutil.move(object_2d_path, render_path)
    model_data={object_3d_path, object_2d_path}
    return model_data
